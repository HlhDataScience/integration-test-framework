# SQL statement to create the main table
create_table_sql: |
  CREATE TABLE IF NOT EXISTS expedientes (
      id INTEGER PRIMARY KEY,
      idRefIntegracionAlumno TEXT,
      idRefPlan TEXT,
      idRefVersionPlan TEXT,
      idRefNodo TEXT,
      idRefUniversidad TEXT,
      idRefTipoEstudio TEXT,
      fechaApertura TEXT,
      universidadDisplayName TEXT,
      centroEstudioDisplayName TEXT,
      tipoEstudioDisplayName TEXT,
      tituloDisplayName TEXT,
      idRefTipoDocumentoIdentificacionPais TEXT,
      alumnoNroDocIdentificacion TEXT,
      alumnoNombre TEXT,
      alumnoApellido1 TEXT,
      alumnoApellido2 TEXT,
      nombreEstudio TEXT,
      nombrePlan TEXT,
      acronimoUniversidad TEXT,
      idUniversidad INTEGER,
      estadoDisplayName TEXT,
      tipoSituacionDisplayName TEXT,
      displayNameDocumentoIdentificacionAlumno TEXT,
      displayNameNombreAlumno TEXT,
      countSeguimientos INTEGER DEFAULT 0,
      countAnotaciones INTEGER DEFAULT 0,
      countRelacionados INTEGER DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      api_fetched_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

# Optional indexes for faster queries
create_index_sql:
  - "CREATE INDEX IF NOT EXISTS idx_expedientes_alumno ON expedientes(idRefIntegracionAlumno);"
  - "CREATE INDEX IF NOT EXISTS idx_expedientes_fecha ON expedientes(fechaApertura);"
  - "CREATE INDEX IF NOT EXISTS idx_expedientes_estado ON expedientes(estadoDisplayName);"
  - "CREATE INDEX IF NOT EXISTS idx_expedientes_universidad ON expedientes(idRefUniversidad);"
  - "CREATE INDEX IF NOT EXISTS idx_expedientes_fetched ON expedientes(api_fetched_at);"

# Insert statement
insert_sql: |
  INSERT OR REPLACE INTO expedientes (
      id, idRefIntegracionAlumno, idRefPlan, idRefVersionPlan, idRefNodo,
      idRefUniversidad, idRefTipoEstudio, fechaApertura, universidadDisplayName,
      centroEstudioDisplayName, tipoEstudioDisplayName, tituloDisplayName,
      idRefTipoDocumentoIdentificacionPais, alumnoNroDocIdentificacion,
      alumnoNombre, alumnoApellido1, alumnoApellido2, nombreEstudio,
      nombrePlan, acronimoUniversidad, idUniversidad, estadoDisplayName,
      tipoSituacionDisplayName, displayNameDocumentoIdentificacionAlumno,
      displayNameNombreAlumno, countSeguimientos, countAnotaciones,
      countRelacionados, api_fetched_at
  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

# Performance optimizations for SQLite
sql_optimizations:
  - "PRAGMA journal_mode = WAL;"
  - "PRAGMA synchronous = NORMAL;"
  - "PRAGMA cache_size = 10000;"
  - "PRAGMA locking_mode = EXCLUSIVE;"
  - "PRAGMA page_size = 4096;"

# Queries to gather database stats
db_stats_queries:
  - "SELECT COUNT(*) FROM expedientes;"
  - "SELECT COUNT(DISTINCT idRefIntegracionAlumno) FROM expedientes;"
  - "SELECT estadoDisplayName, COUNT(*) FROM expedientes GROUP BY estadoDisplayName;"
  - "SELECT DATE(api_fetched_at) as fetch_date, COUNT(*) FROM expedientes GROUP BY DATE(api_fetched_at) ORDER BY fetch_date DESC LIMIT 5;"

# Post-processing SQL after data insertion
postprocess_optimizations: "PRAGMA optimize;"
